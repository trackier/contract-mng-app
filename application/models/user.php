<?php
use Shared\Services\Db;
use Framework\{Security, ArrayMethods};


class User extends Shared\Model
{
    /**
	 * @column
	 * @readwrite
	 * @type mongoid
	 * @index
	 * @validate required
	 */
	protected $_user_id;

	/**
	 * @column
	 * @readwrite
	 * @type text
	 *
	 * @label Name
	 */
	protected $_name;

	/**
	 * @column
	 * @readwrite
	 * @type text
	 *
	 * 
	 */
	protected $_status;

	/**
	 * @column
	 * @readwrite
	 * @type text
	 *
	 * @label Employee Id
	 */
	protected $_emp_id;

	/**
	 * @column
	 * @readwrite
	 * @type mongoid
	 */
	protected $_rm_id;

	/**
	 * @column
	 * @readwrite
	 * @type text
	 *
	 * @label ZOHO Id
	 */
	protected $_zoho_id;

	/**
	 * @column
	 * @readwrite
	 * @type mongoid
	 * @validate required
	 * @label Department
	 */
	protected $_department;

	/**
	 * @column
	 * @readwrite
	 * @type text
	 * @length 255
	 * @index
	 * 
	 * @validate required, min(8), max(255)
	 * @label Email Address
	 */
	protected $_email;

	/**
	 * @column
	 * @readwrite
	 * @type text
	 * @length 200
	 * 
	 * @validate max(200)
	 * @label phone number
	 */
	protected $_phone = null;

	/**
	 * @column
	 * @readwrite
	 * @type text
	 * @enum -> (user, admin)
     * @label role
	 */
	protected $_role;



    /**
    * @column
    * @readwrite
    * @type text
    * @length 100
    */
    protected $_password;

	/**
	 * @column
	 * @readwrite
	 * @type text
	 *
	 * @label gchatwebhook
	 */
	protected $_gchatwebhook;

	public static function isDepartmentHead($id = null, $depId) {
		$depInfo = \Models\Department::first(["_id" => $depId], [],[]);
		$isDepHead = false;
		if (isset($depInfo->team_lead_id) && $depInfo->team_lead_id == $id) {
			$isDepHead = true;
		}
		return $isDepHead;
	}
	public static function getDepartmentHeads() {
		$departments = \Models\Department::selectAll([], [],[]);
		$approvers = ArrayMethods::arrayKeys($departments, 'team_lead_id');
		$users = User::selectAll(['_id' => ['$in' => $approvers]], [], []);
		return $users;
	}
	public static function isFinanceHead($id = null) {
		$depInfo = \Models\Department::first(["name" => "Finance"], [],[]);
		$isDepHead = false;
		if ($depInfo->team_lead_id == $id) {
			$isDepHead = true;
		}
		return $isDepHead;
	}
	public static function getFinanceHead() {
		$depInfo = \Models\Department::first(["name" => "Finance"], [],[]);
		$user = User::first(["_id" => $depInfo->team_lead_id ], [],[]);
		return $user ;
	}

	public static function userGchatMap($id = null) {
		$user = User::first(['gchatwebhook' => ['$ne' => null], '_id' => $id], ['email', 'gchatwebhook']);
		return $user;
	}

	public static function sendGoogleChatNotification($data, $webhookurl){
		$dataHtml = [
			"cards" => [
				[
					"header" => [
						"title" => $data['title'],
						"imageStyle" => "IMAGE"
					],
					"sections" => [
						[
							"widgets" => [
								[
									"keyValue" => [
										"icon" => "PERSON",
										"topLabel" => "Purchase Request generated by: ",
										"content" => ''.$data['requester'].''
									]
								],
								[
									"keyValue" => [
										"icon" => "TICKET",
										"content" => $data['pr_id']
									]
								],
								[
									"keyValue" => [
										"icon" => "TICKET",
										"content" => $data['prname']
									]
								],
								[
									"keyValue" => [
										"icon" => "DOLLAR",
										"content" => \Models\purchasereq::getAmountSingle((object)['_amount' => $data['amount']])
									]
								],
							]
						],
						[
							"widgets" => [
								[
									"buttons" => [
										[
											"textButton" => [
												"text" => "View PR",
												"onClick" => [
													"openLink" => [
														"url" => 'https://procurement.cloudstuff.tech/purchasereq/view/'.$data['_id']
													]
												]
											]
										],
									]
								],
								
							]
						],
					
					]
				]
			]
		];
		
		try{
			// If curl unable to get response
			$json_string = json_encode($dataHtml);
			$curl = new Curl\Curl;
			$curl->setHeader('Content-Type', 'application/json');
			
			$resp = $curl->post(html_entity_decode($webhookurl), $json_string);
			$curl->close();
			//var_dump('sent', ''.$webhookurl.'');
			return true;
		} catch (Exception $e) {
			var_dump($e);
			die();
			return false;
		}
	}

}
